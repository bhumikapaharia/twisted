# Try to get a short workflow name and a job name that start with Python
# version to make it easier to check the status inside GitHub UI.
name: CI

on:
  push:
    branches: [ trunk ]
    tags:
      - twisted-*
  pull_request:
    branches: [ trunk ]


# Only have a run a single parallel for each branch.
# Runs for trunk are queues.
# Older runs for non-trunk branches are cancelled and the jobs are executed
# only for the latest push to the branch.
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/trunk' }}


defaults:
  run:
    shell: bash


jobs:
  testing:
    runs-on: ubuntu-20.04
    env:
      TOXENV: "${{ matrix.tox-env }}"
      # As of April 2021 GHA VM have 2 CPUs - Azure Standard_DS2_v2
      # Trial distributed jobs enabled to speed up the CI jobs.
      TRIAL_ARGS: "-j 4"
    name: ${{ matrix.python-version }}${{ matrix.noipv6 }}-${{ matrix.tox-env }}
    strategy:
      fail-fast: false
      matrix:
        # Run on the minimum micro Python version that we can get on CI.
        # When updating the minimum Python version here, also update the
        # `python_requires` from `setup.cfg`.
        # Run on latest minor release of each major python version.
        python-version: [3.8]
        tox-env: ['alldeps-withcov-posix']
        # By default, tests are executed without disabling IPv6.
        noipv6: ['']
        # Tests are executed with the default target which is the full test suite.
        trial-target: ['']


    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key:
          ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml', 'setup.py',
          'setup.cfg', 'tox.ini') }}
        restore-keys: |
            ${{ runner.os }}-pip-

    - name: Disable IPv6
      if: matrix.noipv6
      run: |
        sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
        sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
        sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1
        ip a

    - uses: twisted/python-info-action@v1
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip tox coverage coveralls

    - name: Test
      run: |
        tox ${{ matrix.trial-target }}

    - name: Prepare coverage
      if: ${{ !cancelled() && contains(matrix['tox-env'], 'withcov') }}
      run: |
        # sub-process coverage are generated in separate files so we combine them
        # to get an unified coverage for the local run.
        # The XML is generate to be used with 3rd party tools like diff-cover.
        python -m coverage combine
        python -m coverage xml -o coverage.xml -i
        python -m coverage report --skip-covered

    - uses: codecov/codecov-action@v1
      if: ${{ !cancelled() && contains(matrix['tox-env'], 'withcov') }}
      with:
        files: coverage.xml
        name: lnx-${{ matrix.python-version }}-${{ matrix.tox-env }}${{ matrix.noipv6 }}
        fail_ci_if_error: true
        functionalities: gcov,search

    - name: Publish to Coveralls
      if: ${{ !cancelled() && contains(matrix['tox-env'], 'withcov') }}
      continue-on-error: true
      run: |
        python -m coveralls -v
      env:
        COVERALLS_REPO_TOKEN: 'JFDTIRUVOQ8jCM3zcajrZALlpKXyiXGAX'


  all-successful:
    # https://github.community/t/is-it-possible-to-require-all-github-actions-tasks-to-pass-without-enumerating-them/117957/4?u=graingert
    runs-on: ubuntu-latest
    needs: [testing]
    steps:
    - name: note that all tests succeeded
      run: echo "ðŸŽ‰"
      
  armv64_job:
      name: Build and Test for arm64
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2
        - name: Set up QEMU
          id: qemu
          uses: docker/setup-qemu-action@v1
        - name: Install and Run tests
          run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
              arm64v8/ubuntu:20.04 \
              bash -exc 'apt-get update && apt-get -y install python3 python3-pip python3-venv curl && \
              python3 -m pip install virtualenv && python3 -m venv py38-venv && \
              source py38-venv/bin/activate && \
              python setup.py install && \
              python -m pip install --upgrade pip tox coverage coveralls && \
              tox -e py38-alldeps-withcov-posix && \
              deactivate'
